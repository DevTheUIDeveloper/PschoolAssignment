@page "/pagination"

@if (TotalPages > 1)
{
    <nav aria-label="Page navigation">
        <ul class="pagination">
            <li class="page-item @(PageIndex == 0 ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(0)">First</button>
            </li>
            <li class="page-item @(PageIndex == 0 ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(PageIndex - 1)">Previous</button>
            </li>
            @for (int i = 0; i < TotalPages; i++)
            {
                <li class="page-item @(PageIndex == i ? "active" : "")">
                    <button class="page-link" @onclick="() => ChangePage(i)">@($"{i + 1}")</button>
                </li>
            }
            <li class="page-item @(PageIndex == TotalPages - 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(PageIndex + 1)">Next</button>
            </li>
            <li class="page-item @(PageIndex == TotalPages - 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(TotalPages - 1)">Last</button>
            </li>
        </ul>
    </nav>
}

@code {
    [Parameter]
    public int PageIndex { get; set; }

    [Parameter]
    public int PageSize { get; set; }

    [Parameter]
    public int TotalItemCount { get; set; }

    private int TotalPages => (int)Math.Ceiling((double)TotalItemCount / PageSize);

    [Parameter]
    public EventCallback<int> OnPageIndexChanged { get; set; }

    private async Task ChangePage(int pageIndex)
    {
        if (pageIndex >= 0 && pageIndex < TotalPages)
        {
            await OnPageIndexChanged.InvokeAsync(pageIndex);
        }
    }
}
