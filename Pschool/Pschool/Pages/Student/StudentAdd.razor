@page "/students/add"
@using Pschool.Model;
@inject Pschool.Service.StudentService studentService
@inject Pschool.Service.ParentService parentService
@inject NavigationManager NavigationManager

<h3>Add Student</h3>

<EditForm Model="newStudent" OnValidSubmit="AddStudent">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="first-name">First Name:</label>
        <InputText id="first-name" class="form-control" @bind-Value="newStudent.FirstName" />
        <ValidationMessage For="@(() => newStudent.FirstName)" />
    </div>
    <div class="form-group">
        <label for="last-name">Last Name:</label>
        <InputText id="last-name" class="form-control" @bind-Value="newStudent.LastName" />
        <ValidationMessage For="@(() => newStudent.LastName)" />
    </div>
    <div class="form-group">
        <label for="age">Age:</label>
        <InputNumber id="age" class="form-control" @bind-Value="newStudent.Age" />
        <ValidationMessage For="@(() => newStudent.Age)" />
    </div>
    <div class="form-group">
        <label for="parent">Parent:</label>
        <select id="parent" class="form-control" @bind="newStudent.ParentId">
            <option value="">Select Parent</option>
            @foreach (var parent in parents)
            {
                <option value="@parent.Id">@string.Concat(parent.FirstName," ", parent.LastName)</option>
            }
        </select>
        <ValidationMessage For="@(() => newStudent.ParentId)" />
    </div>
    <button type="submit" class="mt-3 btn btn-primary">Add Student</button>
</EditForm>

@code {
    private StudentModel newStudent = new StudentModel();
    private List<ParentModel> parents = new List<ParentModel>();

    protected override async Task OnInitializedAsync()
    {
        parents = await parentService.GetParents();
    }

    private async Task AddStudent()
    {
        await studentService.AddStudent(newStudent);
        NavigationManager.NavigateTo("/students");
    }
}
