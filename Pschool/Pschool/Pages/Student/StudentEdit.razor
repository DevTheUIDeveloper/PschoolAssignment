@page "/students/edit/{studentId:int}"

@using Pschool.Model
@inject Pschool.Service.StudentService studentService
@inject Pschool.Service.ParentService parentService
@inject NavigationManager NavigationManager

<h3>Edit Student</h3>

<EditForm Model="editedStudent" OnValidSubmit="UpdateStudent">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="first-name">First Name:</label>
        <InputText id="first-name" class="form-control" @bind-Value="editedStudent.FirstName" />
        <ValidationMessage For="@(() => editedStudent.FirstName)" />
    </div>
    <div class="form-group">
        <label for="last-name">Name:</label>
        <InputText id="last-name" class="form-control" @bind-Value="editedStudent.LastName" />
        <ValidationMessage For="@(() => editedStudent.LastName)" />
    </div>
    <div class="form-group">
        <label for="age">Age:</label>
        <InputNumber id="age" class="form-control" @bind-Value="editedStudent.Age" />
        <ValidationMessage For="@(() => editedStudent.Age)" />
    </div>
    <div class="form-group">
        <label for="parent">Parent:</label>
        <select id="parent" class="form-control" @bind="editedStudent.ParentId">
            @foreach (var parent in parents)
            {
                <option value="@parent.Id">@string.Concat(parent.FirstName," ", parent.LastName)</option>
            }
        </select>
        <ValidationMessage For="@(() => editedStudent.ParentId)" />
    </div>
    <button type="submit" class="mt-3 btn btn-primary">Save Changes</button>
</EditForm>

@code {
    private StudentModel editedStudent = new StudentModel();
    private List<ParentModel> parents = new List<ParentModel>();

    [Parameter]
    public int StudentId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        editedStudent = await studentService.GetStudentById(StudentId);
        parents = await parentService.GetParents();
    }

    private async Task UpdateStudent()
    {
        await studentService.UpdateStudent(editedStudent.Id, editedStudent);
        NavigationManager.NavigateTo("/students");
    }
}
